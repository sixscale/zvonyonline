"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
load_dotenv(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY"),

SKOROZVON_LOGIN = os.environ.get("SKOROZVON_LOGIN")
SKOROZVON_API_KEY = os.environ.get("SKOROZVON_API_KEY")
SKOROZVON_APPLICATION_ID = os.environ.get("SKOROZVON_APPLICATION_ID")
SKOROZVON_APPLICATION_KEY = os.environ.get("SKOROZVON_APPLICATION_KEY")

GS_SCOPES = os.environ.get("GS_SCOPES").split(',')
GS_LEADS_TABLE_ID = os.environ.get("GS_LEADS_TABLE_ID")
GS_LEADS_MAIN_SHEET_ID = os.environ.get("GS_LEADS_MAIN_SHEET_ID")
GS_LEADS_MAIN_SHEET_NAME = "Шаблон"
GS_LEADS_HEADER_SHEET_ID = "1936798193"
GS_LEADS_PROJECTS_SHEET_NAME = "Проекты"
GS_KPI_TABLE_ID = os.environ.get("GS_KPI_TABLE_ID")
GS_KPI_MAIN_SHEET_ID = os.environ.get("GS_KPI_MAIN_SHEET_ID")
GS_KPI_USERS_SHEET_NAME = "Сотрудники"
GS_KPI_USERS_SHEET_TEMPLATE_NAME = "Шаблон"

AMO_LEAD_PIPELINE_ID = int(os.environ.get("AMO_LEAD_PIPELINE_ID"))
AMO_LEAD_STATUS_ID = int(os.environ.get("AMO_LEAD_STATUS_ID"))
AMO_INTEGRATION_SUBDOMAIN = os.environ.get("AMO_INTEGRATION_SUBDOMAIN")
AMO_INTEGRATION_CLIENT_SECRET = os.environ.get("AMO_INTEGRATION_CLIENT_SECRET")
AMO_INTEGRATION_CLIENT_ID = os.environ.get("AMO_INTEGRATION_CLIENT_ID")
AMO_INTEGRATION_CODE = os.environ.get("AMO_INTEGRATION_CODE")
AMO_INTEGRATION_REDIRECT_URI = os.environ.get("AMO_INTEGRATION_REDIRECT_URI")

BITRIX_CRM_ADD_CONTACTS = os.environ.get("BITRIX_CRM_ADD_CONTACTS")

SCOROZVON_WORKING_RESULT_IDS = [
    "50000208191",
    "50000208187",
    "50000208244",
    "50000208236",
    "50000208248",
    "50000080830",
    "50000208240",
    "50000208252",
    "50000208187",
    "50000226822",
    "50000227298",
    "50000237106",
    "50000253353",
]
SCOROZVON_DIALOG_RESULT_NAMES = [
    "Лид",
    "Успех",
    "Отказ",
    "Спорный",
]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ.get("DEBUG") == 'True' else False

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "request_logger_write_data_to_google_sheet": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs/WriteDataToGoogleSheetRequest.log"
        },
        "lead_logger_write_data_to_google_sheet": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs/WriteDataToGoogleSheetResponse.log"
        },
        "request_logger_want_result_webhook": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs/WantResultWebhookRequest.log"
        },
        "contact_logger_want_result_webhook": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs/WantResultWebhookResponse.log"
        },
        "contact_logger_sz_body": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs/SZContactBody.log"
        },
        "amo_usi_body_logger": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs/AmoUSIBody.log"
        },
    },
    "loggers": {
        "request_logger_write_data_to_google_sheet": {
            "handlers": ["request_logger_write_data_to_google_sheet"],
            "level": "INFO",
            "propagate": True,
        },
        "lead_logger_write_data_to_google_sheet": {
            "handlers": ["lead_logger_write_data_to_google_sheet"],
            "level": "INFO",
            "propagate": True,
        },
        "request_logger_want_result_webhook": {
            "handlers": ["request_logger_want_result_webhook"],
            "level": "INFO",
            "propagate": True,
        },
        "contact_logger_want_result_webhook": {
            "handlers": ["contact_logger_want_result_webhook"],
            "level": "INFO",
            "propagate": True,
        },
        "contact_logger_sz_body": {
            "handlers": ["contact_logger_sz_body"],
            "level": "INFO",
            "propagate": True,
        },
        "amo_usi_body_logger": {
            "handlers": ["amo_usi_body_logger"],
            "level": "INFO",
            "propagate": True,
        },
    }
}

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS").split(',')

APPSCHEDULER_DATETIME_FORMAT = 'N j, Y, f:s a'
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'django_apscheduler',

    'integrations',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get("MYSQL_DB"),
        'USER': os.environ.get("MYSQL_USER"),
        'PASSWORD': os.environ.get("MYSQL_PASSWORD"),
        'HOST': os.environ.get("MYSQL_HOST"),
        'PORT': os.environ.get("MYSQL_PORT", 3306),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REDIS settings
REDIS_HOST = '127.0.0.1'
REDIS_PORT = '6379'
# CELERY settings
CELERY_BROKER_URL = 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0'
CELERY_BROKER_TRANSPORT_OPTION = {'visibility_timeout': 3600}
CELERY_RESULT_BACKEND = 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
